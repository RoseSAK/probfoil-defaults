This directory contains the implementation of the Prob2FOIL algorithm for learning probabilistic clauses from probabilistic data.


1. INSTALLATION
===============

Currently, this algorithm will only work on Linux x86_64.

This code has the following dependencies:

    - YAP Prolog (with tabling)
    - Python 2
    

2. DATA FORMAT
==============

This implementation support two input formats:

* ProbLog

The algorithm uses ProbLog's data format, that is Prolog files augmented with probabilities.

For example,

0.8::father(john, mary).
0.7::father(john, billy).

mother(mary, tom).
mother(an, jenny).

parent(X,Y) :- mother(X,Y).
parent(X,Y) :- father(X,Y).

0.8::grandfather(john, tom).

Additionally, the input file should contain type information for all predicates to be used in the learning algorithm.
For example,

base(father(person,person)).
base(mother(person,person)).
base(parent(person,person)).
base(grandfather(person,person)).

* ARFF

For propositional data, Weka's ARFF format can (should) be used.
For this case the algorithm uses optimized evaluation which significantly improves performance.

3. USAGE
========

To run the algorithm, run 'main.py'.
For example, to learn the 'grandfather' relation you can use.

    ./main.py family.pl grandfather/2 father/+- mother/+-

where 
    - family.pl is the data file
    - grandfather/2 is the target ( predicate/arity )
    - father/+- and mother/+- are the modes 
        + means that that argument should be an existing variable in the rule so far
        - means that that argument can be a new variable

With the previous setting, the parent/2 predicate is not used.
We can enable it by using        
    ./main.py family.pl grandfather/2 father/+- mother/+- parent/+-
    
These declarations can also be added directly to the data file by adding a line

    %LEARN grandfather/2 father/+- mother/+- parent/+-
    

There are several parameters available. See './main.py --help' for more information.

The algorithm writes out an extensive log file in XML.

4. NOTES
========

- Using CTRL-C

During clause search you can press CTRL-C to stop the current search for best clause.
This will output the best clause found so far and continue with the next phase.

If you want to stop the algorithm entirely, you can press CTRL-C repeatedly.

- Terminal corruption

Pressing CTRL-C while Yap is running may corrupt your terminal (i.e. input echo-ing will be off).
Type 'reset' on the terminal to reset it. 

5. CREDITS
==========

The algorithm is based on the work of Luc De Raedt, Anton Dries, Ingo Thon, Guy Van den Broeck, Mathias Verbeke. 
It was implemented by Anton Dries.

6. LICENSE
==========

Copyright (C) 2013 Anton Dries (anton.dries@cs.kuleuven.be)

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 2.1 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
